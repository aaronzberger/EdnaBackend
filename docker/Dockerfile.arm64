FROM ubuntu:jammy

# set environment variables for tzdata
ARG TZ=America/New_York
ENV TZ=${TZ}

# include manual pages and documentation
ARG DEBIAN_FRONTEND=noninteractive
RUN apt-get update &&\
 yes | unminimize

# copy new sources.list
COPY --chown=root:root sources.list /etc/apt/sources.list

# include multiarch support
RUN apt-get -y install binfmt-support &&\
 dpkg --add-architecture amd64 &&\
 apt-get update &&\
 apt-get upgrade

# install interactive programs (emacs, vim, nano, man, sudo, etc.)
RUN apt-get -y install\
 bc\
 curl\
 dc\
 git\
 git-doc\
 man\
 micro\
 nano\
 psmisc\
 sudo\
 vim\
 wget\
 locales\
 python3\
 python3-pip

RUN pip install\
 scikit-learn-extra\
 branca==0.5.0\
 certifi==2022.6.15\
 charset-normalizer==2.1.0\
 cycler==0.11.0\
 folium==0.12.1.post1\
 fonttools==4.34.4\
 geographiclib==2.0\
 geojson==2.5.0\
 haversine==2.6.0\
 idna==3.3\
 Jinja2==3.1.2\
 kiwisolver==1.4.4\
 MarkupSafe==2.1.1\
 matplotlib==3.5.2\
 mccabe==0.6.1\
 nptyping==2.2.0\
 numpy==1.23.1\
 overpass==0.7\
 packaging==21.3\
 Pillow==9.2.0\
 polyline==1.4.0\
 pycodestyle==2.8.0\
 pyflakes==2.4.0\
 pyparsing==3.0.9\
 python-dateutil==2.8.2\
 requests==2.28.1\
 Shapely==1.8.2\
 six==1.16.0\
 termcolor==1.1.0\
 tqdm==4.64.0\
 urllib3==1.26.11\
 utm==0.7.0

# set up default locale
RUN locale-gen en_US.UTF-8
ENV LANG en_US.UTF-8

# remove unneeded .deb files
RUN rm -r /var/lib/apt/lists/*

# set up passwordless sudo for user user
RUN useradd -m -s /bin/bash user && \
 echo "user ALL=(ALL:ALL) NOPASSWD: ALL" > /etc/sudoers.d/init

# create binary reporting version of dockerfile
RUN (echo '#\!/bin/sh'; echo 'if test "x$1" = x-n; then echo 16; else echo 16.arm64; fi') > /usr/bin/docker-version; chmod ugo+rx,u+w,go-w /usr/bin/docker-version

# git build arguments
ARG USER=User
ARG EMAIL=nobody@example.com

# configure your environment
USER user
RUN git config --global user.name "${USER}" && \
 git config --global user.email "${EMAIL}" && \
 (echo "(custom-set-variables"; echo " '(c-basic-offset 4)"; echo " '(indent-tabs-mode nil))") > ~/.emacs && \
 (echo "set expandtab"; echo "set shiftwidth=4"; echo "set softtabstop=4") > ~/.vimrc && \
 cat /dev/null > ~/.bash_profile && \
 echo "# 2022: avoid a Docker bug with user mapping by listing working directory" >> ~/.bash_profile && \
 echo "ls -al > /dev/null" >> ~/.bash_profile && \
 echo "for i in \`mount | grep /home/user | sed 's/^.*\\(\\/home[^ ]*\\).*/\\\\1/'\`; do ls -al \$i > /dev/null; done" >> ~/.bash_profile && \
 echo "# make ssh-auth.sock user-readable" >> ~/.bash_profile && \
 (echo "if test -e /run/host-services/ssh-auth.sock; then"; echo "  sudo chown user:user /run/host-services/ssh-auth.sock"; echo "fi") >> ~/.bash_profile && \
 echo ". ~/.bashrc" >> ~/.bash_profile && \
 echo "export PATH=/usr/x86_64-linux-gnu/bin:\$PATH" >> ~/.bashrc && \
 rm -f ~/.bash_logout && \
 echo "add-auto-load-safe-path ~" > ~/.gdbinit

WORKDIR /home/user
CMD ["/bin/bash", "-l"]

# Install Rust, Cargo, and the VRP solver
RUN curl https://sh.rustup.rs -sSf | bash -s -- -y
ENV PATH="/home/user/.cargo/bin:${PATH}"
RUN cargo install vrp-cli

# Initial version of this Dockerfile by Todd Morrill, CS 61 DCE student
